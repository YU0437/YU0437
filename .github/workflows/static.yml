<!DOCTYPE html>
<html lang="zh-CN">
<head>
	<meta charset="UTF-8">
	<title>游戏物品设计工具 - 动态效果表单版</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
	<style>
        .container {
            max-width: 1200px;
        }

        .item-list {
            max-height: 500px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 10px;
        }

        .effect-card {
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .form-section {
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }

        #jsonOutput {
            min-height: 200px;
            font-family: monospace;
        }

        .required-field::after {
            content: " *";
            color: red;
        }
	</style>
</head>
<body>
<div class="container py-4">
	<h1 class="mb-4 text-center">游戏物品设计工具</h1>

	<div class="row">
		<!-- 物品列表 -->
		<div class="col-md-4">
			<div class="form-section">
				<h3>物品列表</h3>
				<div class="item-list" id="itemList">
					<!-- 物品列表将在这里动态生成 -->
				</div>
				<div class="d-flex mt-3">
					<button class="btn btn-primary flex-grow-1 me-2" id="btnAddItem">添加新物品</button>
					<button class="btn btn-outline-secondary" id="btnImportJson">导入JSON</button>
					<input type="file" id="fileInput" accept=".json" style="display: none;">
				</div>
			</div>
		</div>

		<!-- 物品编辑表单 -->
		<div class="col-md-8">
			<div class="form-section" id="itemFormContainer">
				<h3>物品属性</h3>
				<form id="itemForm">
					<input type="hidden" id="itemIndex" value="-1">

					<div class="row mb-3">
						<div class="col-md-6">
							<label for="itemId" class="form-label required-field">物品ID</label>
							<input type="text" class="form-control" id="itemId" required>
						</div>
						<div class="col-md-6">
							<label for="itemPrice" class="form-label required-field">价格</label>
							<input type="number" step="0.1" class="form-control" id="itemPrice" required>
						</div>
					</div>

					<div class="row mb-3">
						<div class="col-md-6">
							<label for="itemIcon" class="form-label">图标路径</label>
							<input type="text" class="form-control" id="itemIcon">
						</div>
						<div class="col-md-6">
							<label for="itemType" class="form-label">类型</label>
							<input type="text" class="form-control" id="itemType">
						</div>
					</div>

					<div class="row mb-3">
						<div class="col-md-6">
							<label for="itemRarity" class="form-label required-field">稀有度</label>
							<select class="form-select" id="itemRarity" required>
								<option value="common">普通</option>
								<option value="uncommon">罕见</option>
								<option value="rare">稀有</option>
								<option value="epic">史诗</option>
								<option value="legendary">传说</option>
							</select>
						</div>
						<div class="col-md-6">
							<label for="itemWeight" class="form-label required-field">权重</label>
							<input type="number" class="form-control" id="itemWeight" value="10" required>
						</div>
					</div>

					<div class="mb-3">
						<h4>效果列表</h4>
						<div id="effectsContainer">
							<!-- 效果卡片将在这里动态生成 -->
						</div>
						<button type="button" class="btn btn-sm btn-outline-primary mt-2" id="btnAddEffect">添加效果
						</button>
					</div>

					<div class="d-flex justify-content-between">
						<button type="button" class="btn btn-danger" id="btnDeleteItem">删除物品</button>
						<button type="submit" class="btn btn-success">保存物品</button>
					</div>
				</form>
			</div>

			<!-- JSON预览 -->
			<div class="form-section">
				<h3>JSON预览</h3>
				<textarea id="jsonOutput" class="form-control mb-2" rows="10"
				          placeholder="请添加或选择物品..."></textarea>
				<div class="d-flex justify-content-between">
					<div>
						<button class="btn btn-primary me-2" id="btnCopyJson">复制JSON</button>
						<button class="btn btn-secondary" id="btnDownloadJson">下载JSON</button>
					</div>
					<button class="btn btn-outline-success" id="btnUpdateFromJson">从JSON更新</button>
				</div>
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
	// 全局变量
	let items = [];
	let currentEffectIndex = -1;
	let currentItemIndex = -1;
	const STORAGE_KEY = 'game_items_designer_data';

	// 1. 首先定义所有可能的参数字段（全局共享池）
	const effectFieldsPool = {
		// 通用数值类参数
		statRatio: {
			type: 'number',
			label: '增加比例',
			step: 1,
			value: 1
		},
		ownerRatio: {
			type: 'number',
			label: '持有属性转换比例',
			step: 1,
			value: 1
		},
		otherStatRatio: {
			type: 'number',
			label: '转换属性比例',
			step: 1,
			value: 1
		},
		statLimitRatio: {
			type: 'number',
			label: '突破上限比例',
			step: 1,
			value: 1,
		},
		triggerChance: {
			type: 'number',
			label: '触发几率',
			step: 0.01,
			min: 0,
			max: 1,
			value: 1
		},
		bulletCounts: {
			type: 'number',
			label: '子弹数量',
			step: 1,
			value: 1
		},
		bulletPenetrate: {
			type: 'number',
			label: '穿透次数',
			step: 1,
			value: 1
		},
		baseDamage: {
			type: 'number',
			label: '基础伤害',
			step: 1,
			value: 1
		},
		attackAmount: {
			type: 'number',
			label: '攻击目标数',
			step: 1,
			value: 1
		},

		// 属性选择类
		stat: {
			type: 'select',
			label: '属性名称',
			options: [
				{value: 'Ack', text: '攻击力'},
				{value: 'MaxHp', text: '最大生命值'},
				{value: 'Def', text: '防御力'},
				{value: 'AttacksPerSecond', text: '攻击速度'},
				{value: 'Critical', text: '暴击率'},
				{value: 'CriticalDamage', text: '暴击伤害'},
				{value: 'LifeSteal', text: '生命偷取'},
				{value: 'HpRecover', text: '生命恢复'},
				{value: 'Speed', text: '移动速度'},
				{value: 'Lucky', text: '幸运值'},
				{value: 'Dodge', text: '闪避率'},
				{value: 'CloseDamage', text: '近战伤害'},
				{value: 'RemoteDamage', text: '远程伤害'}
			]
		},
		addStat: {
			type: 'select',
			label: '需要增加的属性',
			options: [
				{value: 'Ack', text: '攻击力'},
				{value: 'MaxHp', text: '最大生命值'},
				{value: 'Def', text: '防御力'},
				{value: 'AttacksPerSecond', text: '攻击速度'},
				{value: 'Critical', text: '暴击率'},
				{value: 'CriticalDamage', text: '暴击伤害'},
				{value: 'LifeSteal', text: '生命偷取'},
				{value: 'HpRecover', text: '生命恢复'},
				{value: 'Speed', text: '移动速度'},
				{value: 'Lucky', text: '幸运值'},
				{value: 'Dodge', text: '闪避率'},
				{value: 'CloseDamage', text: '近战伤害'},
				{value: 'RemoteDamage', text: '远程伤害'},
				{value: 'TmpAck', text: '临时攻击力'},
				{value: 'TmpDef', text: '临时防御力'},
				{value: 'TmpSpeed', text: '临时移动速度'}
			]
		},
		ownerStat: {
			type: 'select',
			label: '持有属性',
			options: [
				{value: 'Ack', text: '攻击力'},
				{value: 'MaxHp', text: '最大生命值'},
				{value: 'Def', text: '防御力'},
				{value: 'AttacksPerSecond', text: '攻击速度'},
				{value: 'Critical', text: '暴击率'},
				{value: 'CriticalDamage', text: '暴击伤害'},
				{value: 'LifeSteal', text: '生命偷取'},
				{value: 'HpRecover', text: '生命恢复'},
				{value: 'Speed', text: '移动速度'},
				{value: 'Lucky', text: '幸运值'},
				{value: 'Dodge', text: '闪避率'},
				{value: 'CloseDamage', text: '近战伤害'},
				{value: 'RemoteDamage', text: '远程伤害'},
			]
		},
		otherAddStat: {
			type: 'select',
			label: '转换属性',
			options: [
				{value: 'Ack', text: '攻击力'},
				{value: 'MaxHp', text: '最大生命值'},
				{value: 'Def', text: '防御力'},
				{value: 'AttacksPerSecond', text: '攻击速度'},
				{value: 'Critical', text: '暴击率'},
				{value: 'CriticalDamage', text: '暴击伤害'},
				{value: 'LifeSteal', text: '生命偷取'},
				{value: 'HpRecover', text: '生命恢复'},
				{value: 'Speed', text: '移动速度'},
				{value: 'Lucky', text: '幸运值'},
				{value: 'Dodge', text: '闪避率'},
				{value: 'CloseDamage', text: '近战伤害'},
				{value: 'RemoteDamage', text: '远程伤害'},
			]
		},
		addGameStat: {
			type: 'select',
			label: '需要增加的全局属性',
			options: [
				{value: 'GlobalGold', text: '当前金币'},
				{value: 'CurrentLevel', text: '当前等级'},
			]
		},
		statLimit: {
			type: 'select',
			label: '突破属性上限',
			options: [
				{value: 'SpeedMax', text: '速度上限'},
				{value: 'DodgeMax', text: '闪避上限'},
			]
		},
		bulletType: {
			type: 'select',
			label: '子弹类型',
			options: [
				{value: 'Common', text: '普通'},
				{value: 'Explode', text: '爆炸'},
				{value: 'Pierce', text: '穿透'}
			]
		},
		operation: {
			type: 'select',
			label: '操作类型',
			options: [
				{value: 'add', text: '+'},
				{value: 'subtract', text: '-'},
				{value: 'multiply', text: '*'}
			]
		},
		isCritical: {
			type: 'select',
			label: '能否暴击',
			options: [
				{value: 'true', text: '可以暴击'},
				{value: 'false', text: '不能暴击'}
			]
		},
		compares: {
			type: 'select',
			label: '什么时候条件成立',
			options: [
				{value: 'true', text: '<'},
				{value: 'false', text: '>'}
			]
		},
		threshold: {
			type: 'number',
			label: '条件阈值',
			step: '0.1',
			value: 0.1
		},
		value: {
			type: 'number',
			label: '数值',
			step: '0.1',
			value: 0.1
		},
		xSecond: {
			type: 'number',
			label: '秒',
			step: '0.1',
			value: 0.1
		},
		xSecondCount: {
			type: 'number',
			label: '次数',
			step: '1',
			value: 1
		},
		bulletBehaviors: {
			type: 'select',
			label: '子弹行为',
			multiple: true,
			showSelectAll: true,
			options: [
				{value: 'Freezing', text: '子弹附带中毒'},
				{value: 'Burn', text: '子弹附带燃烧效果'}
			]
		},
		specialEventTypes: {
			type: 'select',
			label: '触发类型',
			options: [
				{value: 'OnWaveStart', text: '波次开始时'},
				{value: 'OnWaveEnd', text: '波次结束时'},
				{value: 'OnHit', text: '受伤时'},
				{value: 'OnKill', text: '击杀敌人时'},
				{value: 'OnPickupMaterial', text: '拾取材料时'},
				{value: 'OnCritical', text: '暴击时'},
				{value: 'OnDodge', text: '闪避时'},
				{value: 'OnSecond', text: '每秒'},
				{value: 'OnHpChange', text: '血量变化时'},
				{value: 'OnHalfHealth', text: '半血时'},
				{value: 'OnSpeedChange', text: '移速变化时'},
				{value: 'OnShopApply', text: '购买时生效'},
				{value: 'OnStatChange', text: '属性变化时'},
			]
		},
	};

	// 2. 定义效果参数结构（只声明需要哪些字段）
	const effectParams = {
		// 属性修改效果
		stat: {
			required: ['stat', 'value'],
			optional: ['operation']
		},

		// 触发效果
		triggered: {
			baseParams: {
				required: ['specialEventTypes'],
				optional: ['triggerChance']
			},

			// 效果类型配置（只声明需要哪些字段）
			typeParams: {
				CriticalDouble: {
					required: ['triggerChance']
				},
				CriticalHpRecover: {
					required: ['triggerChance']
				},
				CriticalPercentage: {
					required: ['triggerChance']
				},
				DodgeHpRecover: {
					required: ['triggerChance']
				},
				DodgeRebound: {
					required: ['triggerChance']
				},
				FullHealthHpRecover: {
					required: ['isCritical', 'attackAmount', 'bulletBehaviors']
				},
				ThresholdHpAddStat: {
					required: ['compares', 'threshold', 'addStat', 'statRatio']
				},
				HitExplode: {
					required: ['addStat', 'statRatio', 'bulletType'],
					optional: ['bulletCounts', 'bulletPenetrate']
				},
				HitTemporary: {
					required: ['addStat', 'statRatio'],
				},
				KillAddStat: {
					required: ['addStat', 'statRatio', 'triggerChance']
				},
				KillEnemyToDamage: {
					required: ['baseDamage', 'addStat', 'statRatio', 'triggerChance'],
					optional: ['attackAmount', 'isCritical']
				},
				KillPackedScene: {
					required: ['addStat', 'statRatio', 'triggerChance', 'bulletType'],
					optional: ['bulletCounts', 'bulletType']
				},
				PickAddStat: {
					required: ['addStat', 'statRatio', 'triggerChance']
				},
				PickDouble: {
					required: ['triggerChance']
				},
				PickExplode: {
					required: ['bulletType', 'triggerChance', 'addStat', 'statRatio'],
					optional: ['bulletCounts']
				},
				PickHpRecover: {
					required: ['triggerChance'],
				},
				SecondHpRecover: {
					required: ['recover', 'xSecond'],
				},
				SecondHurt: {
					required: ['baseDamage', 'xSecond'],
				},
				FreeFlushCount: {
					required: ['xSecondCount']
				},
				BulletLaunch: {
					required: ['xSecondCount']
				},
				SecondPackedScene: {
					required: ['xSecond', 'addStat', 'statRatio', 'triggerChance', 'bulletType'],
					optional: ['bulletCounts', 'bulletType']
				},
				SecondTmpChange: {
					required: ['addStat', 'statRatio', 'triggerChance']
				},
				StandTmpChange: {
					required: ['addStat', 'statRatio']
				},
				WaveEndAddStat: {
					required: ['addStat', 'statRatio']
				},
				WaveEndGameConfig: {
					required: ['addGameStat', 'statRatio']
				},
				WaveImmune: {
					required: []
				},
				WaveFreeFlush: {
					required: []
				},
				WaveTemporary: {
					required: ['addStat', 'statRatio']
				},
				StatLimitChange: {
					required: ['statLimit', 'statLimitRatio']
				},
				StatChangeOther: {
					required: ['ownerStat', 'ownerRatio', 'otherAddStat', 'otherStatRatio']
				},
			},
		}
	};

	// 效果类型映射（带中文显示）
	const effectTypeMap = {
		'OnWaveStart': [
			{value: 'WaveTemporary', text: '改变临时属性'},
			{value: 'WaveImmune', text: '抵挡一次伤害'},
			{value: 'WaveFreeFlush', text: '每回合获得一次免费刷新'}
		],
		'OnHit': [
			{value: 'HitExplode', text: '产生爆炸'},
			{value: 'HitTmpChange', text: '改变临时属性'}
		],
		'OnKill': [
			{value: 'KillAddStat', text: '永久增加自身属性'},
			{value: 'KillEnemyToDamage', text: '对其他敌人造成伤害'},
			{value: 'KillPackedScene', text: '生成子弹'}
		],
		'OnPickupMaterial': [
			{value: 'PickAddStat', text: '永久增加属性'},
			{value: 'PickHpRecover', text: '回复生命'},
			{value: 'PickDouble', text: '使材料价值翻倍'},
			{value: 'PickExplode', text: '产生爆炸'}
		],
		'OnCritical': [
			{value: 'CriticalDouble', text: '材料掉落翻倍'},
			{value: 'CriticalHpRecover', text: '回复生命'},
			{value: 'CriticalPercentage', text: '对敌人造成额外的百分比伤害'}
		],
		'OnDodge': [
			{value: 'DodgeRebound', text: '反击敌人'},
			{value: 'DodgeHpRecover', text: '回复生命'}
		],
		'OnSecond': [
			{value: 'SecondHurt', text: '受到伤害'},
			{value: 'SecondHpRecover', text: '回复生命'},
			{value: 'SecondPackedScene', text: '生成子弹'},
			{value: 'SecondTmpChange', text: '改变临时属性'}
		],
		'OnHpChange': [
			{value: 'FullHealthHpRecover', text: '溢出的生命再生会对敌人造成伤害'},
			{value: 'ThresholdHpAddStat', text: '血量到达某个阈值时改变临时属性'}
		],
		'OnWaveEnd': [
			{value: 'WaveEndAddStat', text: '永久增加属性'},
			{value: 'WaveEndGameConfig', text: '增加经济/经验'}
		],
		'OnHalfHealth': [
			{value: 'WaveEndAddStat', text: '永久增加属性'},
			{value: 'WaveEndGameConfig', text: '增加经济/经验'}
		],
		'OnSpeedChange': [
			{value: 'StandTmpChange', text: '站立不动时增加属性'},
		],
		'OnShopApply': [
			{value: 'StatLimitChange', text: '属性上限突破'},
			{value: 'FreeFlushCount', text: '获得x次免费刷新'},
			{value: 'BulletLaunch', text: '获得x次子弹弹射'},
		],
		'OnStatChange': [
			{value: 'StatChangeOther', text: '属性转换'},
		]
	};

	// DOM加载完成后初始化
	document.addEventListener('DOMContentLoaded', function ()
	{
		// 从本地存储加载数据
		loadFromLocalStorage();

		// 初始化事件监听
		initEventListeners();

		// 如果没有物品，添加一个默认物品
		if(items.length === 0)
		{
			addNewItem();
		}
		else
		{
			// 有数据则渲染第一个物品
			editItem(0);
		}
	});

	// 初始化事件监听
	function initEventListeners()
	{
		// 添加物品按钮
		document.getElementById('btnAddItem').addEventListener('click', addNewItem);

		// 保存物品表单
		document.getElementById('itemForm').addEventListener('submit', saveItem);

		// 删除物品按钮
		document.getElementById('btnDeleteItem').addEventListener('click', deleteCurrentItem);

		// 添加效果按钮
		document.getElementById('btnAddEffect').addEventListener('click', function ()
		{
			currentEffectIndex = -1; // 表示是新效果
			showEffectForm();
		});

		// 复制JSON按钮
		document.getElementById('btnCopyJson').addEventListener('click', copyJsonToClipboard);

		// 下载JSON按钮
		document.getElementById('btnDownloadJson').addEventListener('click', downloadJson);

		// 导入JSON按钮
		document.getElementById('btnImportJson').addEventListener('click', function ()
		{
			document.getElementById('fileInput').click();
		});

		// 文件输入变化
		document.getElementById('fileInput').addEventListener('change', handleFileImport);

		// 从JSON更新按钮
		document.getElementById('btnUpdateFromJson').addEventListener('click', updateFromJson);

		// 表单字段变化时自动保存
		document.getElementById('itemForm').addEventListener('input', function ()
		{
			if(currentItemIndex !== -1)
			{
				autoSaveItem();
			}
		});

		// JSON文本区域变化时
		document.getElementById('jsonOutput').addEventListener('input', function ()
		{
			// 可以在这里添加实时验证逻辑
		});
	}

	// 从本地存储加载数据
	function loadFromLocalStorage()
	{
		const savedData = localStorage.getItem(STORAGE_KEY);
		if(savedData)
		{
			try
			{
				items = JSON.parse(savedData);
				updateJsonPreview();
			} catch (e)
			{
				console.error('解析本地存储数据失败:', e);
				items = [];
			}
		}
	}

	// 保存数据到本地存储
	function saveToLocalStorage()
	{
		localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
	}

	// 添加新物品
	function addNewItem()
	{
		const newItem = {
			id: "新物品_" + (items.length + 1),
			price: 0,
			icon: "",
			type: "",
			rarity: "common",
			weight: 10,
			effects: []
		};

		items.push(newItem);
		renderItemList();
		editItem(items.length - 1);
		updateJsonPreview();
		saveToLocalStorage();
	}

	// 渲染物品列表
	function renderItemList()
	{
		const itemList = document.getElementById('itemList');
		itemList.innerHTML = '';

		if(items.length === 0)
		{
			itemList.innerHTML = '<div class="text-muted">暂无物品</div>';
			return;
		}

		items.forEach((item, index) =>
		{
			const itemElement = document.createElement('div');
			itemElement.className = `list-group-item list-group-item-action ${index === currentItemIndex ? 'active-item' : ''}`;
			itemElement.innerHTML = `
				<div class="d-flex justify-content-between">
					<span>${item.id}</span>
					<small class="text-muted">${item.type || '无类型'}</small>
				</div>
				<small class="text-muted">${item.rarity} | 价格: ${item.price}</small>
			`;

			itemElement.addEventListener('click', () => editItem(index));
			itemList.appendChild(itemElement);
		});
	}

	// 编辑物品
	function editItem(index)
	{
		const item = items[index];
		currentItemIndex = index;

		document.getElementById('itemIndex').value = index;
		document.getElementById('itemId').value = item.id;
		document.getElementById('itemPrice').value = item.price;
		document.getElementById('itemIcon').value = item.icon;
		document.getElementById('itemType').value = item.type;
		document.getElementById('itemRarity').value = item.rarity;
		document.getElementById('itemWeight').value = item.weight;

		// 渲染效果列表
		renderEffects(item.effects);
		renderItemList(); // 更新列表中的活动项样式
		updateJsonPreview();
	}

	// 自动保存物品（表单字段变化时调用）
	function autoSaveItem()
	{
		const index = parseInt(document.getElementById('itemIndex').value);
		if(index === -1) return;

		items[index] = {
			id: document.getElementById('itemId').value,
			price: parseFloat(document.getElementById('itemPrice').value),
			icon: document.getElementById('itemIcon').value,
			type: document.getElementById('itemType').value,
			rarity: document.getElementById('itemRarity').value,
			weight: parseInt(document.getElementById('itemWeight').value),
			effects: items[index].effects // 保留原有效果
		};

		renderItemList();
		updateJsonPreview();
		saveToLocalStorage();
	}

	// 保存物品
	function saveItem(e)
	{
		e.preventDefault();
		autoSaveItem();
	}

	// 删除当前物品
	function deleteCurrentItem()
	{
		const index = parseInt(document.getElementById('itemIndex').value);
		if(index === -1) return;


		items.splice(index, 1);
		saveToLocalStorage();
		renderItemList();

		if(items.length > 0)
		{
			editItem(Math.min(index, items.length - 1));
		}
		else
		{
			addNewItem();
		}

	}

	// 显示效果表单
	function showEffectForm()
	{
		const container = document.getElementById('effectsContainer');

		// 如果已经有表单，先移除
		const existingForm = document.getElementById('effectForm');
		if(existingForm) existingForm.remove();

		const formHtml = `
        <div class="effect-card" id="effectForm">
            <h5>效果配置</h5>
            <div class="mb-3">
                <label class="form-label required-field">效果类型</label>
                <select class="form-select effect-main-type" required>
                    <option value="">-- 选择效果类型 --</option>
                    <option value="stat">属性修改</option>
                    <option value="triggered">触发效果</option>
                </select>
            </div>

            <!-- 动态内容区域 -->
            <div id="effectDynamicFields"></div>

            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-sm btn-secondary me-2 cancel-effect">取消</button>
                <button type="button" class="btn btn-sm btn-primary save-effect">保存</button>
            </div>
        </div>
    `;

		container.insertAdjacentHTML('beforeend', formHtml);

		// 主效果类型变化事件
		document.querySelector('#effectForm .effect-main-type').addEventListener('change', function ()
		{
			const type = this.value;
			const fieldsContainer = document.getElementById('effectDynamicFields');
			fieldsContainer.innerHTML = ''; // 清空容器

			if(!type) return;
			if(type === 'triggered')
			{
				// 触发效果需要先选择子类型
				const specialEventTypesConfig = effectFieldsPool.specialEventTypes;

				fieldsContainer.innerHTML = `
        <div class="mb-3">
            <label class="form-label required-field">${specialEventTypesConfig.label}</label>
            <select class="form-select effect-event-type" required>
                <option value="">-- ${specialEventTypesConfig.label} --</option>
                ${specialEventTypesConfig.options.map(option =>
						`<option value="${option.value}">${option.text}</option>`
				).join('')}
            </select>
        </div>
    `;

				// 触发类型变化事件
				document.querySelector('.effect-event-type').addEventListener('change', function ()
				{
					updateEffectSubtypes(this.value);
				});
			}
			else if(type === 'stat')
			{
				// 直接生成属性修改字段
				generateStatFields();
			}
		});

		// 保存和取消按钮事件
		document.querySelector('#effectForm .save-effect').addEventListener('click', saveEffectForm);
		document.querySelector('#effectForm .cancel-effect').addEventListener('click', function ()
		{
			document.getElementById('effectForm').remove();
		});
	}

	// 编辑效果
	function editEffect(index)
	{
		const itemIndex = document.getElementById('itemIndex').value;
		if(itemIndex === -1) return;

		const effect = items[itemIndex].effects[index];
		currentEffectIndex = index;

		showEffectForm();

		// 稍等片刻让表单渲染完成
		setTimeout(() =>
		{
			if(effect.stat && !effect.effect)
			{
				// 属性修改效果
				document.querySelector('.effect-main-type').value = 'stat';
				document.querySelector('.effect-main-type').dispatchEvent(new Event('change'));

				// 填充值
				setTimeout(() =>
				{
					if(effect.stat) document.querySelector('[data-param="stat"]').value = effect.stat;
					if(effect.value) document.querySelector('[data-param="value"]').value = effect.value;
					if(effect.operation) document.querySelector('[data-param="operation"]').value = effect.operation;
				}, 50);
			}
			else if(effect.effect === 'Triggered')
			{
				// 触发效果
				document.querySelector('.effect-main-type').value = 'triggered';
				document.querySelector('.effect-main-type').dispatchEvent(new Event('change'));

				// 填充值
				setTimeout(() =>
				{
					if(effect.specialEventTypes)
					{
						document.querySelector('.effect-event-type').value = effect.specialEventTypes;
						document.querySelector('.effect-event-type').dispatchEvent(new Event('change'));

						setTimeout(() =>
						{
							if(effect.type)
							{
								document.querySelector('.effect-type').value = effect.type;
								document.querySelector('.effect-type').dispatchEvent(new Event('change'));

								setTimeout(() =>
								{
									if(effect.triggerChance) document.querySelector('[data-param="triggerchance"]').value = effect.triggerChance;
									if(effect.addStat) document.querySelector('[data-param="addstat"]').value = effect.addStat;
									if(effect.statRatio) document.querySelector('[data-param="statratio"]').value = effect.statRatio;
									if(effect.bulletCounts) document.querySelector('[data-param="bulletcounts"]').value = effect.bulletCounts;
									if(effect.bulletType) document.querySelector('[data-param="bullettype"]').value = effect.bulletType;
									if(effect.bulletPenetrate) document.querySelector('[data-param="bulletpenetrate"]').value = effect.bulletPenetrate;
								}, 50);
							}
						}, 50);
					}
				}, 50);
			}
		}, 100);
	}


	// 删除效果
	function deleteEffect(index)
	{
		const itemIndex = document.getElementById('itemIndex').value;
		if(itemIndex === -1) return;


		items[itemIndex].effects.splice(index, 1);
		renderEffects(items[itemIndex].effects);
		updateJsonPreview();
		saveToLocalStorage();

	}

	// 渲染效果列表
	function renderEffects(effects)
	{
		const container = document.getElementById('effectsContainer');
		container.innerHTML = '';

		if(effects.length === 0)
		{
			container.innerHTML = '<div class="text-muted">暂无效果</div>';
			return;
		}

		effects.forEach((effect, index) =>
		{
			const effectCard = document.createElement('div');
			effectCard.className = 'effect-card';

			let effectContent = '';
			if(effect.stat && !effect.effect)
			{

				// 属性修改效果
				effectContent = `
  <div class="d-flex justify-content-between">
    <strong>属性修改</strong>
    <div>
      <button class="btn btn-sm btn-outline-secondary edit-effect" data-index="${index}">编辑</button>
      <button class="btn btn-sm btn-outline-danger delete-effect" data-index="${index}">删除</button>
    </div>
  </div>
  <div>属性: ${effect.stat}</div>
  <div>值: ${effect.value}</div>
  <div>操作: ${effect.operation === 'add' ? '+' : effect.operation === 'subtract' ? '-' : effect.operation === 'multiply' ? '*' : effect.operation}</div>
  </div>
`;
			}
			else if(effect.effect === 'Triggered')
			{
				// 英文 → 中文的映射表
				const eventTypeToChinese = {
					"OnWaveStart": "当波次开始时",
					"OnWaveEnd": "当波次结束时",
					"OnHit": "当受伤时",
					"OnKill": "当击杀敌人时",
					"OnPickupMaterial": "当拾取材料时",
					"OnCritical": "当暴击时",
					"OnDodge": "当闪避时",
					"OnSecond": "每X秒",
					"OnFullHealth": "当满血时",
					"OnHalfHealth": "当半血时",
					"OnSpeedChange": "当移速变化时",
					"OnHpChange": "当血量变化时",
					"OnShopApply": "当购买该道具时",
					"OnStatChange": "当属性变化时",
				};
				// 查找触发时机的中文名称
				let eventText = eventTypeToChinese[effect.specialEventTypes] || effect.specialEventTypes;
				// 英文 → 中文的映射表
				const statToChinese = {
					"Ack": "攻击力",
					"MaxHp": "最大生命值",
					"Def": "防御力",
					"AttacksPerSecond": "攻击速度",
					"Critical": "暴击率",
					"CriticalDamage": "暴击伤害",
					"LifeSteal": "生命窃取",
					"HpRecover": "生命恢复",
					"Speed": "移动速度",
					"SpeedMax": "移速上限",
					"CloseDamage": "近战伤害",
					"Lucky": "幸运",
					"Dodge": "闪避率",
					"DodgeMax": "闪避上限",
					"RemoteDamage": "远程伤害",
					"TmpAck": "临时攻击力",
					"TmpDef": "临时防御力",
					"TmpSpeed": "临时移动速度"
				};
				// 查找触发时机的中文名称
				// 获取属性类型的中文（优先用 addStat，没有则用 stat）
				const statKey = effect.addStat || effect.stat;  // 关键修复：检查 addStat
				const statText = statKey ? statToChinese[statKey] || statKey : "无属性";
				// 查找效果类型的中文名称
				let typeText = effect.type;
				for (const eventType in effectTypeMap)
				{
					const found = effectTypeMap[eventType].find(item => item.value === effect.type);
					if(found)
					{
						typeText = found.text;
						break;
					}
				}

				effectContent = `
        <div class="d-flex justify-content-between">
            <strong>触发效果</strong>
            <div>
                <button class="btn btn-sm btn-outline-secondary edit-effect" data-index="${index}">编辑</button>
                <button class="btn btn-sm btn-outline-danger delete-effect" data-index="${index}">删除</button>
            </div>
        </div>
      <div>效果:
    <span class="effect-description">
        <!-- 触发条件  当什么时候-->
        ${eventText && (effect.type !== 'SecondHurt' && effect.type !== 'ThresholdHpAddStat' && effect.type !==
						'StatChangeOther') ? `${eventText}` : ''}

        <!-- 概率    有多少概率,如果不需要概率择不显示-->
        ${effect.triggerChance ? `，${effect.triggerChance}%概率` : ''}



        <!-- 特殊处理效果  -->
        <!-- 特殊处理每秒效果  -->
        ${effect.specialEventTypes === 'OnSecond' && effect.xSecond ?
						`每${effect.xSecond}秒` : ''}

        <!-- 效果数值 造成多少多少效果或者什么效果 -->
        ${effect.statRatio !== undefined && effect.type !== 'ThresholdHpAddStat' && effect.type !== 'StatChangeOther' && !effect.bulletType ?
						`，${effect.statRatio > 0 ? '+' : ''}${effect.statRatio}% ${statText}` : ''}

        <!-- 特殊效果描述  特殊的效果放在这里-->
        ${effect.type === 'FullHealthHpRecover' ? `，溢出的生命再生会对敌人造成伤害` : ''}
        ${effect.type === 'ThresholdHpAddStat' ?
						`血量${effect.compares ? "低于" : "高于"}${effect.threshold * 100}%时${effect.addStat}${effect.statRatio >
						0 ? '+' : ''}${effect.statRatio}%` :
						''}
		${effect.type === 'StatChangeOther' ?
						`每持有${effect.statRatio >
						0 ? '+' : ''}${effect.statRatio}%${effect.addStat},获得${effect.otherStatRatio >
						0 ? '+' : ''}${effect.otherStatRatio}%${effect.otherAddStat}` :
						''}
        ${effect.type === 'SecondHurt' ? `，受到 ${effect.baseDamage || 0}点伤害` : ''}
        ${effect.type === 'HitExplode' ? `，发射${effect.bulletCounts || 1}枚${effect.bulletType}子弹` : ''}
        ${effect.type === 'KillPackedScene' ? `，发射${effect.bulletCounts || 1}枚${effect.bulletType}子弹` : ''}
        ${effect.type === 'WaveFreeFlush' ? `每回合获得一次免费刷新` : ''}
        ${effect.type === 'BulletLaunch' ? `子弹弹射+${effect.xSecond}` : ''}
        ${effect.type === 'FreeFlushCount' ? `获得${effect.xSecond}次刷新` : ''}

        <!-- 子弹伤害详情  如果效果存在生成子弹,择生成子弹描述-->
        ${effect.bulletType ?
						` (基础伤害: ${effect.baseDamage || 0}${effect.addStat ? ` + ${effect.statRatio > 0 ? '+' : ''}${effect.statRatio}% ${statText}` : ''})` : ''}
    </span>
</div>
    `;
			}
			effectCard.innerHTML = effectContent;
			container.appendChild(effectCard);
		});

		// 添加编辑和删除效果的监听
		document.querySelectorAll('.edit-effect').forEach(btn =>
		{
			btn.addEventListener('click', function ()
			{
				const index = parseInt(this.getAttribute('data-index'));
				editEffect(index);
			});
		});

		document.querySelectorAll('.delete-effect').forEach(btn =>
		{
			btn.addEventListener('click', function ()
			{
				const index = parseInt(this.getAttribute('data-index'));
				deleteEffect(index);
			});
		});
	}

	// 更新JSON预览
	function updateJsonPreview()
	{
		const jsonOutput = document.getElementById('jsonOutput');
		jsonOutput.value = JSON.stringify(items, null, 2);
	}

	// 复制JSON到剪贴板
	function copyJsonToClipboard()
	{
		const jsonOutput = document.getElementById('jsonOutput');
		jsonOutput.select();
		document.execCommand('copy');
		alert('JSON已复制到剪贴板');
	}

	// 下载JSON
	function downloadJson()
	{
		const jsonOutput = document.getElementById('jsonOutput');
		const blob = new Blob([jsonOutput.value], {type: 'application/json'});
		const url = URL.createObjectURL(blob);
		const a = document.createElement('a');
		a.href = url;
		a.download = 'game_items.json';
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	}

	// 导入JSON文件
	function handleFileImport(e)
	{
		const file = e.target.files[0];
		if(!file) return;

		const reader = new FileReader();
		reader.onload = function (e)
		{
			try
			{
				const importedItems = JSON.parse(e.target.result);
				if(Array.isArray(importedItems))
				{
					items = importedItems;
					renderItemList();
					if(items.length > 0)
					{
						editItem(0);
					}
					else
					{
						addNewItem();
					}
					updateJsonPreview();
					saveToLocalStorage();
					alert('导入成功！');
				}
				else
				{
					alert('导入失败：文件内容必须是物品数组');
				}
			} catch (error)
			{
				alert('导入失败：' + error.message);
			}
		};
		reader.readAsText(file);
		// 重置文件输入，以便可以再次选择同一个文件
		e.target.value = '';
	}

	// 从JSON文本更新
	function updateFromJson()
	{
		const jsonOutput = document.getElementById('jsonOutput');
		try
		{
			const {value} = jsonOutput;
			const importedItems = JSON.parse(value);
			if(Array.isArray(importedItems))
			{
				items = importedItems;
				renderItemList();
				if(items.length > 0)
				{
					editItem(0);
				}
				else
				{
					addNewItem();
				}
				saveToLocalStorage();
				alert('更新成功！');
			}
			else
			{
				alert('更新失败：JSON内容必须是物品数组');
			}
		} catch (error)
		{
			alert('更新失败：' + error.message);
		}
	}

	// 更新效果子类型
	function updateEffectSubtypes(eventType)
	{
		const fieldsContainer = document.getElementById('effectDynamicFields');
		const subtypeContainer = document.createElement('div');
		subtypeContainer.className = 'mb-3 effect-subtype-container';

		// 清除旧的子类型容器
		const oldContainer = fieldsContainer.querySelector('.effect-subtype-container');
		if(oldContainer) oldContainer.remove();

		if(!eventType) return;

		const subtypes = effectTypeMap[eventType] || [];

		if(subtypes.length === 0)
		{
			return;
		}
		subtypeContainer.innerHTML = `
    <label class="form-label required-field">效果的具体作用是什么</label>
    <select class="form-select effect-type" required>
        <option value="">-- 选择效果类型 --</option>
        ${subtypes.map(type => `
            <option value="${type.value}">${type.text}</option>
        `).join('')}
    </select>
`;

		fieldsContainer.appendChild(subtypeContainer);

		// 子类型变化事件
		subtypeContainer.querySelector('.effect-type').addEventListener('change', function ()
		{
			const effectType = this.value;
			if(!effectType) return;

			// 生成效果字段
			generateEffectFields(effectType);
		});
	}

	function generateStatFields()
	{
		const fieldsContainer = document.getElementById('effectDynamicFields');
		fieldsContainer.innerHTML = ''; // 清空现有字段

		// 创建属性名称选择框
		const statField = createFieldElement(effectFieldsPool.stat);
		fieldsContainer.appendChild(statField);

		// 创建数值输入框
		const valueField = createFieldElement({
			type: 'number',
			label: '数值',
			value: 0.1,
			step: '0.1',
			required: true
		});
		fieldsContainer.appendChild(valueField);

		// 创建操作类型选择框(可选)
		const operationField = createFieldElement(effectFieldsPool.operation);
		operationField.querySelector('select').required = false;
		fieldsContainer.appendChild(operationField);
	}

	function createFieldElement(config)
	{
		const div = document.createElement('div');
		div.className = 'mb-3 dynamic-field';

		const label = document.createElement('label');
		label.className = 'form-label';
		label.textContent = config.label;
		if(config.required !== false)
		{
			label.classList.add('required-field');
		}

		let input;
		if(config.type === 'select')
		{
			input = document.createElement('select');
			input.className = 'form-control';

			// Handle multiple select
			if(config.multiple)
			{
				input.multiple = true;
				input.size = config.size || 4; // Default to show 4 options
			}

			// Add options
			config.options.forEach(opt =>
			{
				const option = document.createElement('option');
				option.value = opt.value;
				option.textContent = opt.text;
				input.appendChild(option);
			});
		}
		else if(config.type === 'multiselect' || (config.type === 'select' && config.multiple && config.showSelectAll))
		{
			// Create container for multi-select with select all functionality
			const multiSelectContainer = document.createElement('div');
			multiSelectContainer.className = 'multiselect-container';

			// Create the select element
			input = document.createElement('select');
			input.className = 'form-control';
			input.multiple = true;
			input.size = config.size || 4;
			input.dataset.param = config.label;

			// Add options
			config.options.forEach(opt =>
			{
				const option = document.createElement('option');
				option.value = opt.value;
				option.textContent = opt.text;
				// Handle pre-selected values
				if(config.value)
				{
					if(Array.isArray(config.value) && config.value.includes(opt.value))
					{
						option.selected = true;
					}
					else if(config.value === opt.value)
					{
						option.selected = true;
					}
				}
				input.appendChild(option);
			});

			// Add select all/deselect all buttons if showSelectAll is true
			if(config.showSelectAll)
			{
				const buttonGroup = document.createElement('div');
				buttonGroup.className = 'mt-2';

				const selectAllBtn = document.createElement('button');
				selectAllBtn.type = 'button';
				selectAllBtn.className = 'btn btn-sm btn-outline-secondary me-2';
				selectAllBtn.textContent = 'Select All';
				selectAllBtn.addEventListener('click', () =>
				{
					Array.from(input.options).forEach(option =>
					{
						option.selected = true;
					});
				});

				const deselectAllBtn = document.createElement('button');
				deselectAllBtn.type = 'button';
				deselectAllBtn.className = 'btn btn-sm btn-outline-secondary';
				deselectAllBtn.textContent = 'Deselect All';
				deselectAllBtn.addEventListener('click', () =>
				{
					Array.from(input.options).forEach(option =>
					{
						option.selected = false;
					});
				});

				buttonGroup.appendChild(selectAllBtn);
				buttonGroup.appendChild(deselectAllBtn);
				multiSelectContainer.appendChild(input);
				multiSelectContainer.appendChild(buttonGroup);

				div.appendChild(label);
				div.appendChild(multiSelectContainer);
				return div;
			}

			// If not showing select all buttons, just add the multi-select
			multiSelectContainer.appendChild(input);
			div.appendChild(label);
			div.appendChild(multiSelectContainer);
			return div;
		}
		else
		{
			// Regular input field
			input = document.createElement('input');
			input.type = config.type || 'text';
			input.className = 'form-control';

			if(config.type === 'number')
			{
				if(config.step) input.step = config.step;
				if(config.min) input.min = config.min;
				if(config.max) input.max = config.max;
			}
		}

		// Set initial value
		if(config.value !== undefined)
		{
			if(input.type === 'checkbox')
			{
				input.checked = config.value;
			}
			else
			{
				input.value = config.value;
			}
		}

		// Set required attribute
		if(config.required !== false) input.required = true;

		// Add data attribute for parameter identification
		input.dataset.param = config.label.replace(/\s+/g, '').toLowerCase();

		div.appendChild(label);
		div.appendChild(input);
		return div;
	}

	function generateEffectFields(effectType)
	{
		const fieldsContainer = document.getElementById('effectDynamicFields');

		// 清除旧的参数字段（保留触发时机和效果类型选择器）
		const oldParams = fieldsContainer.querySelectorAll('.dynamic-field');
		oldParams.forEach(el =>
		{
			if(!el.closest('.effect-subtype-container') && !el.closest('.effect-event-container'))
			{
				el.remove();
			}
		});

		const config = effectParams.triggered.typeParams[effectType];
		if(!config) return;

		// 生成必填字段
		config.required.forEach(param =>
		{
			const fieldConfig = effectFieldsPool[param];
			if(fieldConfig)
			{
				fieldsContainer.appendChild(createFieldElement({
					...fieldConfig,
					required: true
				}));
			}
		});

		// 生成可选字段
		(config.optional || []).forEach(param =>
		{
			const fieldConfig = effectFieldsPool[param];
			if(fieldConfig)
			{
				fieldsContainer.appendChild(createFieldElement({
					...fieldConfig,
					required: false
				}));
			}
		});
	}

	function saveEffectForm()
	{
		const itemIndex = parseInt(document.getElementById('itemIndex').value);
		if(itemIndex === -1) return;

		const form = document.getElementById('effectForm');
		const mainType = form.querySelector('.effect-main-type').value;

		if(!mainType)
		{
			alert('请选择效果类型');
			return;
		}

		// 中文 → 英文的映射表（只改这里即可）
		const chineseToEnglishMap = {
			"需要增加的属性": "addStat",
			"增加比例": "statRatio",
			"持有属性转换比例": "statRatio",
			"转换属性比例": "otherStatRatio",
			"突破上限比例": "statRatio",
			"触发几率": "triggerChance",
			"子弹数量": "bulletCounts",
			"子弹类型": "bulletType",
			"穿透次数": "bulletPenetrate",
			"数值": "value",
			"操作类型": "operation",
			"属性名称": "stat",
			"能否暴击": "isCritical",
			"攻击目标数": "attackAmount",
			"基础伤害": "baseDamage",
			"秒": "xSecond",
			"次数": "xSecond",
			"什么时候条件成立": "compare",
			"条件阈值": "threshold",
			"需要增加的全局属性": "addStat",
			"突破属性上限": "addStat",
			"持有属性": "addStat",
			"转换属性": "otherAddStat",
			// 其他字段按需添加...
		};

		let effect = {};
		if(mainType === 'stat')
		{
			// 属性修改效果
			const statField = form.querySelector('[data-param="属性名称"]');
			const valueField = form.querySelector('[data-param="数值"]');
			const operationField = form.querySelector('[data-param="操作类型"]');

			if(!statField || !valueField)
			{
				alert('缺少必要的属性字段');
				return;
			}

			const value = parseFloat(valueField.value);
			if(isNaN(value))
			{
				alert('请输入有效的数值');
				return;
			}

			effect = {
				stat: statField.value,
				value: value,
				operation: operationField?.value || 'add'
			};
		}
		else if(mainType === 'triggered')
		{
			// 触发效果
			effect = {
				effect: 'Triggered',
				specialEventTypes: form.querySelector('.effect-event-type').value,
				type: form.querySelector('.effect-type')?.value
			};

			// 遍历所有动态字段，并转换键名
			form.querySelectorAll('.dynamic-field input, .dynamic-field select').forEach(field =>
			{
				let paramName = field.dataset.param;
				const value = field.value;

				if(paramName && value)
				{
					// 如果字段是中文，转换成英文
					if(chineseToEnglishMap[paramName])
					{
						paramName = chineseToEnglishMap[paramName];
					}
					effect[paramName] = field.type === 'number' ? parseFloat(value) : value;
				}
			});
		}

		// 保存效果
		if(currentEffectIndex === -1)
		{
			items[itemIndex].effects.push(effect);
		}
		else
		{
			items[itemIndex].effects[currentEffectIndex] = effect;
		}

		form.remove();
		renderEffects(items[itemIndex].effects);
		updateJsonPreview();
		saveToLocalStorage();
	}
</script>
</body>
</html>
